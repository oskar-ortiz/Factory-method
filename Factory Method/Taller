// =====================================================================
// SISTEMA GLOBALDOCS SOLUTIONS - PATRÓN FACTORY METHOD CON VALIDACIONES
// Taller completo funcional para Eclipse IDE con validaciones de usuario y país
// =====================================================================

import java.util.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

// =====================================================================
// Clase User - Representa un usuario del sistema
// =====================================================================
class User {
    private String userId;
    private String name;
    private String email;
    private String role;
    private String country;
    private boolean isActive;
    private Set<String> permissions;
    
    public User(String userId, String name, String email, String role, String country) {
        this.userId = userId;
        this.name = name;
        this.email = email;
        this.role = role;
        this.country = country;
        this.isActive = true;
        this.permissions = new HashSet<>();
        initializePermissions();
    }
    
    private void initializePermissions() {
        switch (role.toUpperCase()) {
            case "ADMIN":
                permissions.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO", 
                                                "CERTIFICADO_DIGITAL", "DECLARACION_TRIBUTARIA"));
                break;
            case "CONTADOR":
                permissions.addAll(Arrays.asList("FACTURA", "REPORTE_FINANCIERO", "DECLARACION_TRIBUTARIA"));
                break;
            case "LEGAL":
                permissions.addAll(Arrays.asList("CONTRATO", "CERTIFICADO_DIGITAL"));
                break;
            case "ANALISTA":
                permissions.addAll(Arrays.asList("FACTURA", "REPORTE_FINANCIERO"));
                break;
            default:
                permissions.add("FACTURA"); // Permiso básico
        }
    }
    
    public boolean hasPermission(String documentType) {
        return permissions.contains(documentType.toUpperCase());
    }
    
    // Getters
    public String getUserId() { return userId; }
    public String getName() { return name; }
    public String getEmail() { return email; }
    public String getRole() { return role; }
    public String getCountry() { return country; }
    public boolean isActive() { return isActive; }
    public Set<String> getPermissions() { return new HashSet<>(permissions); }
}

// =====================================================================
// Clase Country - Gestiona información de países y sus regulaciones
// =====================================================================
class Country {
    private String code;
    private String name;
    private String currency;
    private Set<String> supportedDocuments;
    private Map<String, String> documentRegulations;
    
    public Country(String code, String name, String currency) {
        this.code = code;
        this.name = name;
        this.currency = currency;
        this.supportedDocuments = new HashSet<>();
        this.documentRegulations = new HashMap<>();
        initializeDocumentSupport();
    }
    
    private void initializeDocumentSupport() {
        switch (code.toUpperCase()) {
            case "CO": // Colombia
                supportedDocuments.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO", 
                                                       "CERTIFICADO_DIGITAL", "DECLARACION_TRIBUTARIA"));
                documentRegulations.put("FACTURA", "Resolución DIAN 000042 de 2020");
                documentRegulations.put("DECLARACION_TRIBUTARIA", "Estatuto Tributario Nacional");
                break;
            case "MX": // México
                supportedDocuments.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO", 
                                                       "CERTIFICADO_DIGITAL"));
                documentRegulations.put("FACTURA", "Código Fiscal de la Federación");
                documentRegulations.put("CERTIFICADO_DIGITAL", "SAT - Servicio de Administración Tributaria");
                break;
            case "AR": // Argentina
                supportedDocuments.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO"));
                documentRegulations.put("FACTURA", "AFIP - Resolución General 4291/2018");
                break;
            case "CL": // Chile
                supportedDocuments.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO", 
                                                       "DECLARACION_TRIBUTARIA"));
                documentRegulations.put("FACTURA", "SII - Servicio de Impuestos Internos");
                break;
            case "PE": // Perú
                supportedDocuments.addAll(Arrays.asList("FACTURA", "CONTRATO", "REPORTE_FINANCIERO"));
                documentRegulations.put("FACTURA", "SUNAT - Resolución de Superintendencia N° 097-2012");
                break;
        }
    }
    
    public boolean supportsDocument(String documentType) {
        return supportedDocuments.contains(documentType.toUpperCase());
    }
    
    public String getRegulation(String documentType) {
        return documentRegulations.get(documentType.toUpperCase());
    }
    
    // Getters
    public String getCode() { return code; }
    public String getName() { return name; }
    public String getCurrency() { return currency; }
    public Set<String> getSupportedDocuments() { return new HashSet<>(supportedDocuments); }
}

// =====================================================================
// Clase Document - Representa un documento a procesar con validaciones
// =====================================================================
class Document {
    private String id;
    private String format;
    private String content;
    private String type;
    private String ownerUserId;
    private LocalDate creationDate;
    private String status;
    private long fileSize;
    
    public Document(String id, String format, String content, String type, String ownerUserId) {
        this.id = id;
        this.format = format;
        this.content = content;
        this.type = type;
        this.ownerUserId = ownerUserId;
        this.creationDate = LocalDate.now();
        this.status = "PENDING";
        this.fileSize = content.length() * 2; // Simulación de tamaño en bytes
    }
    
    public boolean isValidFormat() {
        Map<String, Set<String>> validFormats = new HashMap<>();
        validFormats.put("FACTURA", new HashSet<>(Arrays.asList("XML", "PDF")));
        validFormats.put("CONTRATO", new HashSet<>(Arrays.asList("PDF", "DOCX")));
        validFormats.put("REPORTE_FINANCIERO", new HashSet<>(Arrays.asList("EXCEL", "CSV", "PDF")));
        validFormats.put("CERTIFICADO_DIGITAL", new HashSet<>(Arrays.asList("P12", "PFX", "CER")));
        validFormats.put("DECLARACION_TRIBUTARIA", new HashSet<>(Arrays.asList("XML", "PDF")));
        
        Set<String> allowedFormats = validFormats.get(type.toUpperCase());
        return allowedFormats != null && allowedFormats.contains(format.toUpperCase());
    }
    
    public boolean isValidSize() {
        // Límite de 50MB por documento
        return fileSize <= 50 * 1024 * 1024;
    }
    
    public boolean isValidContent() {
        if (content == null || content.trim().isEmpty()) {
            return false;
        }
        
        switch (type.toUpperCase()) {
            case "FACTURA":
                return content.contains("invoice") || content.contains("factura");
            case "CONTRATO":
                return content.toUpperCase().contains("CONTRATO") || 
                       content.toUpperCase().contains("CONTRACT");
            case "REPORTE_FINANCIERO":
                return content.contains("balance") || content.contains("financial");
            case "CERTIFICADO_DIGITAL":
                return content.contains("certificate") || content.contains("cert");
            case "DECLARACION_TRIBUTARIA":
                return content.contains("tax_declaration") || content.contains("tributaria");
            default:
                return false;
        }
    }
    
    // Getters y Setters
    public String getId() { return id; }
    public String getFormat() { return format; }
    public String getContent() { return content; }
    public String getType() { return type; }
    public String getOwnerUserId() { return ownerUserId; }
    public LocalDate getCreationDate() { return creationDate; }
    public String getStatus() { return status; }
    public long getFileSize() { return fileSize; }
    public void setStatus(String status) { this.status = status; }
}

// =====================================================================
// Servicio de Validaciones - Centraliza toda la lógica de validación
// =====================================================================
class ValidationService {
    private static Map<String, User> users = new HashMap<>();
    private static Map<String, Country> countries = new HashMap<>();
    
    static {
        initializeUsers();
        initializeCountries();
    }
    
    private static void initializeUsers() {
        users.put("admin001", new User("admin001", "Carlos Rodriguez", "carlos.rodriguez@globaldocs.com", "ADMIN", "CO"));
        users.put("cont001", new User("cont001", "Maria Gonzalez", "maria.gonzalez@globaldocs.com", "CONTADOR", "MX"));
        users.put("legal001", new User("legal001", "Juan Perez", "juan.perez@globaldocs.com", "LEGAL", "AR"));
        users.put("analist001", new User("analist001", "Ana Lopez", "ana.lopez@globaldocs.com", "ANALISTA", "CL"));
        users.put("user001", new User("user001", "Pedro Martin", "pedro.martin@globaldocs.com", "USER", "PE"));
    }
    
    private static void initializeCountries() {
        countries.put("CO", new Country("CO", "Colombia", "COP"));
        countries.put("MX", new Country("MX", "Mexico", "MXN"));
        countries.put("AR", new Country("AR", "Argentina", "ARS"));
        countries.put("CL", new Country("CL", "Chile", "CLP"));
        countries.put("PE", new Country("PE", "Peru", "PEN"));
    }
    
    public static ValidationResult validateUser(String userId) {
        User user = users.get(userId);
        if (user == null) {
            return new ValidationResult(false, "Usuario no encontrado: " + userId);
        }
        if (!user.isActive()) {
            return new ValidationResult(false, "Usuario inactivo: " + userId);
        }
        return new ValidationResult(true, "Usuario valido: " + user.getName());
    }
    
    public static ValidationResult validateCountry(String countryCode) {
        Country country = countries.get(countryCode.toUpperCase());
        if (country == null) {
            return new ValidationResult(false, "Pais no soportado: " + countryCode);
        }
        return new ValidationResult(true, "Pais valido: " + country.getName());
    }
    
    public static ValidationResult validateUserPermission(String userId, String documentType) {
        User user = users.get(userId);
        if (user == null) {
            return new ValidationResult(false, "Usuario no encontrado");
        }
        if (!user.hasPermission(documentType)) {
            return new ValidationResult(false, "Usuario sin permisos para procesar: " + documentType);
        }
        return new ValidationResult(true, "Usuario autorizado para: " + documentType);
    }
    
    public static ValidationResult validateCountryDocument(String countryCode, String documentType) {
        Country country = countries.get(countryCode.toUpperCase());
        if (country == null) {
            return new ValidationResult(false, "Pais no valido");
        }
        if (!country.supportsDocument(documentType)) {
            return new ValidationResult(false, "Documento no soportado en " + country.getName() + ": " + documentType);
        }
        return new ValidationResult(true, "Documento soportado en " + country.getName());
    }
    
    public static ValidationResult validateDocument(Document document) {
        List<String> errors = new ArrayList<>();
        
        if (!document.isValidFormat()) {
            errors.add("Formato no valido para " + document.getType() + ": " + document.getFormat());
        }
        if (!document.isValidSize()) {
            errors.add("Documento excede el tamano maximo (50MB)");
        }
        if (!document.isValidContent()) {
            errors.add("Contenido del documento no valido o vacio");
        }
        
        if (!errors.isEmpty()) {
            return new ValidationResult(false, "Errores en documento: " + String.join(", ", errors));
        }
        
        return new ValidationResult(true, "Documento valido");
    }
    
    public static User getUser(String userId) {
        return users.get(userId);
    }
    
    public static Country getCountry(String countryCode) {
        return countries.get(countryCode.toUpperCase());
    }
    
    public static void printUserInfo(String userId) {
        User user = users.get(userId);
        if (user != null) {
            System.out.println("Usuario: " + user.getName() + " (" + user.getRole() + ")");
            System.out.println("Email: " + user.getEmail());
            System.out.println("Pais: " + user.getCountry());
            System.out.println("Permisos: " + user.getPermissions());
        }
    }
    
    public static void printCountryInfo(String countryCode) {
        Country country = countries.get(countryCode.toUpperCase());
        if (country != null) {
            System.out.println("Pais: " + country.getName() + " (" + country.getCode() + ")");
            System.out.println("Moneda: " + country.getCurrency());
            System.out.println("Documentos soportados: " + country.getSupportedDocuments());
        }
    }
}

// =====================================================================
// Clase ValidationResult - Resultado de validaciones
// =====================================================================
class ValidationResult {
    private boolean valid;
    private String message;
    
    public ValidationResult(boolean valid, String message) {
        this.valid = valid;
        this.message = message;
    }
    
    public boolean isValid() { return valid; }
    public String getMessage() { return message; }
}

// =====================================================================
// Clase DocumentData - Almacena datos extraídos del documento
// =====================================================================
class DocumentData {
    private Map<String, String> fields;
    
    public DocumentData() {
        this.fields = new HashMap<>();
    }
    
    public void addField(String key, String value) {
        fields.put(key, value);
    }
    
    public String getField(String key) {
        return fields.get(key);
    }
    
    public Map<String, String> getAllFields() {
        return new HashMap<>(fields);
    }
}

// =====================================================================
// Clase ProcessingResult - Resultado del procesamiento
// =====================================================================
class ProcessingResult {
    private boolean success;
    private String message;
    private String report;
    
    public ProcessingResult(boolean success, String message) {
        this.success = success;
        this.message = message;
    }
    
    public ProcessingResult(boolean success, String message, String report) {
        this.success = success;
        this.message = message;
        this.report = report;
    }
    
    public boolean isSuccess() { return success; }
    public String getMessage() { return message; }
    public String getReport() { return report; }
}

// =====================================================================
// PRODUCTO ABSTRACTO - DocumentProcessor CON VALIDACIONES
// Define la interfaz común para todos los procesadores
// =====================================================================
abstract class DocumentProcessor {
    protected String documentType;
    protected String region;
    protected User currentUser;
    protected Country currentCountry;
    
    public DocumentProcessor(String documentType, String region, User user, Country country) {
        this.documentType = documentType;
        this.region = region;
        this.currentUser = user;
        this.currentCountry = country;
    }
    
    // Método plantilla que define el flujo de procesamiento CON VALIDACIONES
    public final ProcessingResult processDocument(Document document) {
        System.out.println("Iniciando procesamiento de " + documentType + " en " + currentCountry.getName());
        System.out.println("Usuario: " + currentUser.getName() + " (" + currentUser.getRole() + ")");
        
        // Validaciones previas al procesamiento
        ValidationResult validation = performPreValidations(document);
        if (!validation.isValid()) {
            document.setStatus("VALIDATION_FAILED");
            return new ProcessingResult(false, validation.getMessage());
        }
        
        document.setStatus("PROCESSING");
        
        if (!validateFormat(document)) {
            document.setStatus("FORMAT_ERROR");
            return new ProcessingResult(false, "Formato invalido");
        }
        
        DocumentData data = extractData(document);
        if (data == null) {
            document.setStatus("EXTRACTION_ERROR");
            return new ProcessingResult(false, "Error extrayendo datos");
        }
        
        String report = generateReport(data);
        document.setStatus("COMPLETED");
        
        return new ProcessingResult(true, "Procesamiento exitoso", report);
    }
    
    private ValidationResult performPreValidations(Document document) {
        // Validar usuario
        ValidationResult userValidation = ValidationService.validateUser(currentUser.getUserId());
        if (!userValidation.isValid()) {
            return userValidation;
        }
        
        // Validar permisos de usuario
        ValidationResult permissionValidation = ValidationService.validateUserPermission(
            currentUser.getUserId(), document.getType());
        if (!permissionValidation.isValid()) {
            return permissionValidation;
        }
        
        // Validar país
        ValidationResult countryValidation = ValidationService.validateCountry(currentCountry.getCode());
        if (!countryValidation.isValid()) {
            return countryValidation;
        }
        
        // Validar soporte de documento en país
        ValidationResult documentCountryValidation = ValidationService.validateCountryDocument(
            currentCountry.getCode(), document.getType());
        if (!documentCountryValidation.isValid()) {
            return documentCountryValidation;
        }
        
        // Validar documento
        ValidationResult documentValidation = ValidationService.validateDocument(document);
        if (!documentValidation.isValid()) {
            return documentValidation;
        }
        
        System.out.println("Todas las validaciones pasaron correctamente");
        return new ValidationResult(true, "Validaciones exitosas");
    }
    
    // Métodos abstractos que deben implementar las clases concretas
    protected abstract boolean validateFormat(Document document);
    protected abstract DocumentData extractData(Document document);
    protected abstract String generateReport(DocumentData data);
}

// =====================================================================
// PRODUCTOS CONCRETOS - Implementaciones específicas de procesadores
// =====================================================================

// Procesador de Facturas Electrónicas
class InvoiceProcessor extends DocumentProcessor {
    
    public InvoiceProcessor(String region, User user, Country country) {
        super("Factura Electronica", region, user, country);
    }
    
    @Override
    protected boolean validateFormat(Document document) {
        System.out.println("   Validando formato XML de factura electronica...");
        String regulation = currentCountry.getRegulation("FACTURA");
        if (regulation != null) {
            System.out.println("   Regulacion aplicable: " + regulation);
        }
        return document.getFormat().equals("XML") && 
               document.getContent().contains("invoice");
    }
    
    @Override
    protected DocumentData extractData(Document document) {
        System.out.println("   Extrayendo datos fiscales de factura...");
        DocumentData data = new DocumentData();
        data.addField("nit", extractNIT(document));
        data.addField("total", extractTotal(document));
        data.addField("impuestos", extractTaxes(document));
        data.addField("fecha", LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        data.addField("moneda", currentCountry.getCurrency());
        data.addField("procesado_por", currentUser.getName());
        return data;
    }
    
    @Override
    protected String generateReport(DocumentData data) {
        System.out.println("   Generando reporte de factura electronica...");
        StringBuilder report = new StringBuilder();
        report.append("\n=== REPORTE DE FACTURA ELECTRONICA ===\n");
        report.append("Pais: ").append(currentCountry.getName()).append(" (").append(currentCountry.getCode()).append(")\n");
        report.append("Moneda: ").append(data.getField("moneda")).append("\n");
        report.append("NIT: ").append(data.getField("nit")).append("\n");
        report.append("Total: ").append(formatCurrency(data.getField("total"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Impuestos: ").append(formatCurrency(data.getField("impuestos"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Fecha: ").append(data.getField("fecha")).append("\n");
        report.append("Procesado por: ").append(data.getField("procesado_por")).append(" (").append(currentUser.getRole()).append(")\n");
        report.append("Estado: VALIDADA Y PROCESADA\n");
        report.append("==========================================\n");
        return report.toString();
    }
    
    private String extractNIT(Document document) {
        return "900123456-1";
    }
    
    private String extractTotal(Document document) {
        return "1500000";
    }
    
    private String extractTaxes(Document document) {
        return "285000";
    }
    
    private String formatCurrency(String amount) {
        try {
            long value = Long.parseLong(amount);
            return String.format("%,d", value);
        } catch (NumberFormatException e) {
            return amount;
        }
    }
}

// Procesador de Contratos Legales
class ContractProcessor extends DocumentProcessor {
    
    public ContractProcessor(String region, User user, Country country) {
        super("Contrato Legal", region, user, country);
    }
    
    @Override
    protected boolean validateFormat(Document document) {
        System.out.println("   Validando formato de contrato legal...");
        return document.getFormat().equals("PDF") && 
               document.getContent().toUpperCase().contains("CONTRATO");
    }
    
    @Override
    protected DocumentData extractData(Document document) {
        System.out.println("   Extrayendo clausulas y partes del contrato...");
        DocumentData data = new DocumentData();
        data.addField("partes", extractParties(document));
        data.addField("clausulas", extractClauses(document));
        data.addField("vigencia", extractValidity(document));
        data.addField("tipo", "Comercial");
        data.addField("procesado_por", currentUser.getName());
        data.addField("jurisdiccion", currentCountry.getName());
        return data;
    }
    
    @Override
    protected String generateReport(DocumentData data) {
        System.out.println("   Generando reporte de contrato legal...");
        StringBuilder report = new StringBuilder();
        report.append("\n=== REPORTE DE CONTRATO LEGAL ===\n");
        report.append("Jurisdiccion: ").append(data.getField("jurisdiccion")).append("\n");
        report.append("Partes: ").append(data.getField("partes")).append("\n");
        report.append("Tipo: ").append(data.getField("tipo")).append("\n");
        report.append("Clausulas: ").append(data.getField("clausulas")).append("\n");
        report.append("Vigencia: ").append(data.getField("vigencia")).append("\n");
        report.append("Procesado por: ").append(data.getField("procesado_por")).append(" (").append(currentUser.getRole()).append(")\n");
        report.append("Estado: VERIFICADO Y PROCESADO\n");
        report.append("==================================\n");
        return report.toString();
    }
    
    private String extractParties(Document document) {
        return "GlobalDocs Solutions S.A.S, TechPartner Corp.";
    }
    
    private String extractClauses(Document document) {
        return "Confidencialidad, Exclusividad, Penalidades";
    }
    
    private String extractValidity(Document document) {
        return "2025-2027 (2 años)";
    }
}

// Procesador de Reportes Financieros
class FinancialReportProcessor extends DocumentProcessor {
    
    public FinancialReportProcessor(String region, User user, Country country) {
        super("Reporte Financiero", region, user, country);
    }
    
    @Override
    protected boolean validateFormat(Document document) {
        System.out.println("   Validando formato de reporte financiero...");
        return (document.getFormat().equals("EXCEL") || document.getFormat().equals("CSV")) && 
               document.getContent().contains("balance");
    }
    
    @Override
    protected DocumentData extractData(Document document) {
        System.out.println("   Extrayendo datos financieros...");
        DocumentData data = new DocumentData();
        data.addField("ingresos", "2500000000");
        data.addField("gastos", "1800000000");
        data.addField("utilidad", "700000000");
        data.addField("periodo", "Q3-2025");
        data.addField("moneda", currentCountry.getCurrency());
        data.addField("procesado_por", currentUser.getName());
        return data;
    }
    
    @Override
    protected String generateReport(DocumentData data) {
        System.out.println("   Generando reporte financiero consolidado...");
        StringBuilder report = new StringBuilder();
        report.append("\n=== REPORTE FINANCIERO CONSOLIDADO ===\n");
        report.append("Pais: ").append(currentCountry.getName()).append("\n");
        report.append("Moneda: ").append(data.getField("moneda")).append("\n");
        report.append("Ingresos: ").append(formatCurrency(data.getField("ingresos"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Gastos: ").append(formatCurrency(data.getField("gastos"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Utilidad Neta: ").append(formatCurrency(data.getField("utilidad"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Periodo: ").append(data.getField("periodo")).append("\n");
        report.append("Procesado por: ").append(data.getField("procesado_por")).append(" (").append(currentUser.getRole()).append(")\n");
        report.append("Estado: AUDITADO Y APROBADO\n");
        report.append("=======================================\n");
        return report.toString();
    }
    
    private String formatCurrency(String amount) {
        try {
            long value = Long.parseLong(amount);
            return String.format("%,d", value);
        } catch (NumberFormatException e) {
            return amount;
        }
    }
}

// Procesador de Certificados Digitales
class DigitalCertificateProcessor extends DocumentProcessor {
    
    public DigitalCertificateProcessor(String region, User user, Country country) {
        super("Certificado Digital", region, user, country);
    }
    
    @Override
    protected boolean validateFormat(Document document) {
        System.out.println("   Validando certificado digital...");
        String regulation = currentCountry.getRegulation("CERTIFICADO_DIGITAL");
        if (regulation != null) {
            System.out.println("   Regulacion aplicable: " + regulation);
        }
        return document.getFormat().equals("P12") && 
               document.getContent().contains("certificate");
    }
    
    @Override
    protected DocumentData extractData(Document document) {
        System.out.println("   Verificando autenticidad del certificado...");
        DocumentData data = new DocumentData();
        data.addField("emisor", "Autoridad Certificadora " + currentCountry.getName());
        data.addField("propietario", "GlobalDocs Solutions");
        data.addField("vencimiento", "2026-12-31");
        data.addField("algoritmo", "RSA-2048");
        data.addField("procesado_por", currentUser.getName());
        data.addField("jurisdiccion", currentCountry.getName());
        return data;
    }
    
    @Override
    protected String generateReport(DocumentData data) {
        System.out.println("   Generando reporte de certificado digital...");
        StringBuilder report = new StringBuilder();
        report.append("\n=== REPORTE DE CERTIFICADO DIGITAL ===\n");
        report.append("Jurisdiccion: ").append(data.getField("jurisdiccion")).append("\n");
        report.append("Emisor: ").append(data.getField("emisor")).append("\n");
        report.append("Propietario: ").append(data.getField("propietario")).append("\n");
        report.append("Algoritmo: ").append(data.getField("algoritmo")).append("\n");
        report.append("Vencimiento: ").append(data.getField("vencimiento")).append("\n");
        report.append("Procesado por: ").append(data.getField("procesado_por")).append(" (").append(currentUser.getRole()).append(")\n");
        report.append("Estado: VALIDO Y VERIFICADO\n");
        report.append("=======================================\n");
        return report.toString();
    }
}

// Procesador de Declaraciones Tributarias
class TaxDeclarationProcessor extends DocumentProcessor {
    
    public TaxDeclarationProcessor(String region, User user, Country country) {
        super("Declaracion Tributaria", region, user, country);
    }
    
    @Override
    protected boolean validateFormat(Document document) {
        System.out.println("   Validando declaracion tributaria...");
        String regulation = currentCountry.getRegulation("DECLARACION_TRIBUTARIA");
        if (regulation != null) {
            System.out.println("   Regulacion aplicable: " + regulation);
        }
        return document.getFormat().equals("XML") && 
               document.getContent().contains("tax_declaration");
    }
    
    @Override
    protected DocumentData extractData(Document document) {
        System.out.println("   Extrayendo informacion tributaria...");
        DocumentData data = new DocumentData();
        data.addField("contribuyente", "GlobalDocs Solutions S.A.S");
        data.addField("impuesto_renta", "350000000");
        data.addField("iva", "180000000");
        data.addField("periodo", "2024");
        data.addField("moneda", currentCountry.getCurrency());
        data.addField("procesado_por", currentUser.getName());
        return data;
    }
    
    @Override
    protected String generateReport(DocumentData data) {
        System.out.println("   Generando reporte de declaracion tributaria...");
        StringBuilder report = new StringBuilder();
        report.append("\n=== REPORTE DE DECLARACION TRIBUTARIA ===\n");
        report.append("Pais: ").append(currentCountry.getName()).append("\n");
        report.append("Contribuyente: ").append(data.getField("contribuyente")).append("\n");
        report.append("Periodo: ").append(data.getField("periodo")).append("\n");
        report.append("Impuesto Renta: ").append(formatCurrency(data.getField("impuesto_renta"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("IVA: ").append(formatCurrency(data.getField("iva"))).append(" ").append(data.getField("moneda")).append("\n");
        report.append("Procesado por: ").append(data.getField("procesado_por")).append(" (").append(currentUser.getRole()).append(")\n");
        report.append("Estado: DECLARACION PROCESADA\n");
        report.append("==========================================\n");
        return report.toString();
    }
    
    private String formatCurrency(String amount) {
        try {
            long value = Long.parseLong(amount);
            return String.format("%,d", value);
        } catch (NumberFormatException e) {
            return amount;
        }
    }
}

// =====================================================================
// CREATOR ABSTRACTO - DocumentProcessorFactory
// Define la interfaz para crear procesadores de documentos
// =====================================================================
abstract class DocumentProcessorFactory {
    
    // Factory Method - Este es el método que implementa el patrón
    public abstract DocumentProcessor createProcessor(String documentType, String userId, String countryCode);
    
    // Método plantilla que usa el Factory Method
    public final ProcessingResult processDocument(String documentType, String userId, String countryCode, Document document) {
        System.out.println("\n=== GLOBALDOCS SOLUTIONS - PROCESAMIENTO DE DOCUMENTOS ===");
        System.out.println("Solicitando procesador para: " + documentType);
        
        DocumentProcessor processor = createProcessor(documentType, userId, countryCode);
        if (processor == null) {
            return new ProcessingResult(false, "No se pudo crear procesador para: " + documentType);
        }
        
        return processor.processDocument(document);
    }
}

// =====================================================================
// CONCRETE CREATOR - Implementación específica del Factory
// =====================================================================
class GlobalDocsProcessorFactory extends DocumentProcessorFactory {
    
    @Override
    public DocumentProcessor createProcessor(String documentType, String userId, String countryCode) {
        // Validar usuario y país
        User user = ValidationService.getUser(userId);
        Country country = ValidationService.getCountry(countryCode);
        
        if (user == null) {
            System.out.println("Error: Usuario no encontrado - " + userId);
            return null;
        }
        
        if (country == null) {
            System.out.println("Error: País no soportado - " + countryCode);
            return null;
        }
        
        // Factory Method - Crear el procesador según el tipo de documento
        String region = country.getName();
        switch (documentType.toUpperCase()) {
            case "FACTURA":
                System.out.println("Creando procesador de Facturas Electrónicas para " + region);
                return new InvoiceProcessor(region, user, country);
                
            case "CONTRATO":
                System.out.println("Creando procesador de Contratos Legales para " + region);
                return new ContractProcessor(region, user, country);
                
            case "REPORTE_FINANCIERO":
                System.out.println("Creando procesador de Reportes Financieros para " + region);
                return new FinancialReportProcessor(region, user, country);
                
            case "CERTIFICADO_DIGITAL":
                System.out.println("Creando procesador de Certificados Digitales para " + region);
                return new DigitalCertificateProcessor(region, user, country);
                
            case "DECLARACION_TRIBUTARIA":
                System.out.println("Creando procesador de Declaraciones Tributarias para " + region);
                return new TaxDeclarationProcessor(region, user, country);
                
            default:
                System.out.println("Error: Tipo de documento no soportado - " + documentType);
                return null;
        }
    }
}

// =====================================================================
// Clase Main - Demostración del sistema con casos de prueba
// =====================================================================
public class Main {
    
    public static void main(String[] args) {
        System.out.println("=======================================================");
        System.out.println("    GLOBALDOCS SOLUTIONS - SISTEMA DE PROCESAMIENTO");
        System.out.println("         PATRÓN FACTORY METHOD CON VALIDACIONES");
        System.out.println("=======================================================\n");
        
        // Crear la fábrica
        DocumentProcessorFactory factory = new GlobalDocsProcessorFactory();
        
        // Mostrar información de usuarios y países disponibles
        mostrarInformacionSistema();
        
        // Casos de prueba exitosos
        System.out.println("\n" + "=".repeat(60));
        System.out.println("CASOS DE PRUEBA EXITOSOS");
        System.out.println("=".repeat(60));
        
        ejecutarCasoExitoso(factory, "Factura Electrónica Colombia", 
                           "admin001", "CO", "FACTURA", "XML", "factura invoice data");
        
        ejecutarCasoExitoso(factory, "Contrato Legal Argentina", 
                           "legal001", "AR", "CONTRATO", "PDF", "contrato legal agreement");
        
        ejecutarCasoExitoso(factory, "Reporte Financiero Chile", 
                           "analist001", "CL", "REPORTE_FINANCIERO", "EXCEL", "balance financial report");
        
        ejecutarCasoExitoso(factory, "Certificado Digital México", 
                           "cont001", "MX", "CERTIFICADO_DIGITAL", "P12", "certificate digital auth");
        
        ejecutarCasoExitoso(factory, "Declaración Tributaria Colombia", 
                           "admin001", "CO", "DECLARACION_TRIBUTARIA", "XML", "tax_declaration tributaria");
        
        // Casos de prueba con errores
        System.out.println("\n" + "=".repeat(60));
        System.out.println("CASOS DE PRUEBA CON ERRORES (VALIDACIONES)");
        System.out.println("=".repeat(60));
        
        ejecutarCasoError(factory, "Usuario inexistente", 
                         "user999", "CO", "FACTURA", "XML", "factura invoice data");
        
        ejecutarCasoError(factory, "País no soportado", 
                         "admin001", "BR", "FACTURA", "XML", "factura invoice data");
        
        ejecutarCasoError(factory, "Sin permisos", 
                         "user001", "PE", "DECLARACION_TRIBUTARIA", "XML", "tax_declaration");
        
        ejecutarCasoError(factory, "Formato inválido", 
                         "admin001", "CO", "FACTURA", "DOCX", "factura invoice data");
        
        ejecutarCasoError(factory, "Documento no soportado en país", 
                         "admin001", "PE", "DECLARACION_TRIBUTARIA", "XML", "tax_declaration");
        
        System.out.println("\n" + "=".repeat(60));
        System.out.println("PROCESAMIENTO COMPLETADO");
        System.out.println("=".repeat(60));
    }
    
    private static void mostrarInformacionSistema() {
        System.out.println("USUARIOS DEL SISTEMA:");
        System.out.println("-".repeat(40));
        ValidationService.printUserInfo("admin001");
        System.out.println();
        ValidationService.printUserInfo("cont001");
        System.out.println();
        ValidationService.printUserInfo("legal001");
        System.out.println();
        ValidationService.printUserInfo("analist001");
        System.out.println();
        ValidationService.printUserInfo("user001");
        
        System.out.println("\n\nPAÍSES SOPORTADOS:");
        System.out.println("-".repeat(40));
        ValidationService.printCountryInfo("CO");
        System.out.println();
        ValidationService.printCountryInfo("MX");
        System.out.println();
        ValidationService.printCountryInfo("AR");
        System.out.println();
        ValidationService.printCountryInfo("CL");
        System.out.println();
        ValidationService.printCountryInfo("PE");
    }
    
    private static void ejecutarCasoExitoso(DocumentProcessorFactory factory, String testName,
                                           String userId, String countryCode, String docType, 
                                           String format, String content) {
        System.out.println("\n--- CASO: " + testName + " ---");
        
        // Crear documento
        Document document = new Document("DOC-" + System.currentTimeMillis(), 
                                       format, content, docType, userId);
        
        // Procesar documento
        ProcessingResult result = factory.processDocument(docType, userId, countryCode, document);
        
        if (result.isSuccess()) {
            System.out.println("✓ ÉXITO: " + result.getMessage());
            if (result.getReport() != null) {
                System.out.println(result.getReport());
            }
        } else {
            System.out.println("✗ ERROR: " + result.getMessage());
        }
    }
    
    private static void ejecutarCasoError(DocumentProcessorFactory factory, String testName,
                                         String userId, String countryCode, String docType, 
                                         String format, String content) {
        System.out.println("\n--- CASO ERROR: " + testName + " ---");
        
        // Crear documento
        Document document = new Document("DOC-" + System.currentTimeMillis(), 
                                       format, content, docType, userId);
        
        // Procesar documento
        ProcessingResult result = factory.processDocument(docType, userId, countryCode, document);
        
        if (!result.isSuccess()) {
            System.out.println("✓ ERROR ESPERADO: " + result.getMessage());
        } else {
            System.out.println("✗ INESPERADO: El caso debería haber fallado");
        }
    }
}
